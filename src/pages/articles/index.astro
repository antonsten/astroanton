---
import Layout from '../../layouts/Layout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

interface Post {
    title: string;
    description?: string;
    publishDate: string;
    minutesToRead?: number;
    url: string;
    layout?: string;
}

// Format the date without using browser APIs
function formatDate(dateStr: string | undefined) {
    if (!dateStr) {
        console.error('No date string provided');
        return '';
    }
    try {
        const [year, month, day] = dateStr.split('-').map(num => parseInt(num, 10));
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        return `${months[month - 1]} ${day}, ${year}`;
    } catch (error) {
        console.error('Error formatting date:', error);
        return '';
    }
}

let sortedPosts: Post[] = [];

try {
    // Get all articles from the content collection
    const articles = await getCollection('articles');
    console.log('Found articles:', articles.length);

    // Transform articles into posts
    sortedPosts = articles
        .map((article: CollectionEntry<'articles'>) => ({
            ...article.data,
            url: `/articles/${article.slug}`
        }))
        .filter((post: Post) => {
            // Filter out posts without required frontmatter
            if (!post.publishDate || !post.title) {
                console.warn(`Skipping post with missing frontmatter:`, post.url);
                return false;
            }
            return true;
        })
        .sort((a: Post, b: Post) => {
            try {
                return new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime();
            } catch (e) {
                console.error('Error sorting posts:', e);
                return 0;
            }
        });

    console.log('Final sorted posts:', sortedPosts.length);
    console.log('First sorted post:', sortedPosts[0]);
} catch (error) {
    console.error('Error in main processing:', error);
    throw error; // Re-throw to trigger the 500 error page
}
---

<Layout title="Articles | Anton Sten" description="Articles and thoughts on UX design, product strategy, and digital experiences.">
    <div class="px-5 pt-32">
        <div class="max-w-[700px] mx-auto">
            <header class="mb-16">
                <h1 class="text-[32px] md:text-[50px] leading-[40px] md:leading-[56px] tracking-[-0.02em] font-medium text-black mb-4">Articles</h1>
                <p class="text-[20px] leading-[32px] tracking-[-0.01em] text-dark-grey">
                    Thoughts on UX design, product strategy, and digital experiences.
                </p>
            </header>
            
            <div class="space-y-16">
                {sortedPosts.length === 0 ? (
                    <p class="text-[18px] leading-[28px] tracking-[-0.01em] text-dark-grey">
                        No articles found. Please check the console for debugging information.
                    </p>
                ) : (
                    sortedPosts.map((post: Post) => {
                        const formattedDate = formatDate(post.publishDate);
                        
                        return (
                            <article class="group">
                                <a href={post.url} class="block space-y-4">
                                    <div class="space-y-2">
                                        <h2 class="text-[26px] leading-[34px] tracking-[-0.01em] font-medium text-black group-hover:text-green transition-colors">
                                            {post.title}
                                        </h2>
                                        <div class="flex items-center gap-2 text-dark-grey text-[14px] leading-[20px] tracking-[-0.01em]">
                                            {formattedDate && (
                                                <>
                                                    <time datetime={post.publishDate}>{formattedDate}</time>
                                                    <span>â€¢</span>
                                                </>
                                            )}
                                            {post.minutesToRead && (
                                                <span>{post.minutesToRead} min read</span>
                                            )}
                                        </div>
                                    </div>
                                    {post.description && (
                                        <p class="text-[18px] leading-[28px] tracking-[-0.01em] text-dark-grey">
                                            {post.description}
                                        </p>
                                    )}
                                </a>
                            </article>
                        );
                    })
                )}
            </div>
        </div>
    </div>
</Layout> 